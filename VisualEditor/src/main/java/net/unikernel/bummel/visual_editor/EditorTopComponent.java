package net.unikernel.bummel.visual_editor;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.XStreamException;
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import net.unikernel.bummel.palette.PaletteSupport;
import net.unikernel.bummel.project_model.api.ProjectModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.cookies.OpenCookie;
import org.openide.cookies.SaveCookie;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.unikernel.bummel.visual_editor//Editor//EN",
autostore = false)
@TopComponent.Description(preferredID = "EditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.unikernel.bummel.visual_editor.EditorTopComponent")
@ActionReference(path = "Menu/Window", position = 0)
@TopComponent.OpenActionRegistration(displayName = "#CTL_NewEditorAction"/*,
preferredID = "EditorTopComponent"*/)
public final class EditorTopComponent extends TopComponent
{
	private JComponent vlEditorView;
	
	/**
	 * Counter of opened top components.
	 */
	private static int counter = 0;
	private static Map<File, EditorTopComponent> tcByFile =
			new HashMap<>();

	public static EditorTopComponent findInstance(File f)
	{
		EditorTopComponent tc = tcByFile.get(f);
		if (tc == null)
		{
			//TODO - add a constructor from the File object ??
			try
			{
				ProjectModel project = Opener.open(f);
				if(project != null)
				{
					tc = new EditorTopComponent(Opener.open(f));
					tcByFile.put(f, tc);
					FileObject fob = FileUtil.toFileObject(FileUtil.normalizeFile(f));
					tc.content.add(DataObject.find(fob));
				}
			} catch (DataObjectNotFoundException ex)
			{
				Exceptions.printStackTrace(ex);
			}
		}
		return tc;
	}
	private InstanceContent content = new InstanceContent();
	private Saver saver = new Saver();
	private static Opener opener = new Opener();
	private ProjectModel project;
	private CircuitGraphPinScene scene;

	public EditorTopComponent()
	{
		this(new ProjectModel(NbBundle.getMessage(EditorTopComponent.class, "CTL_EditorTopComponent", ++counter)));
	}

	private EditorTopComponent(ProjectModel obj)
	{
		initComponents();
		project = obj;
		//setName(NbBundle.getMessage(EditorTopComponent.class, "CTL_EditorTopComponent", ++counter));
		setName(project.getName());
		setToolTipText(NbBundle.getMessage(EditorTopComponent.class, "HINT_EditorTopComponent"));
		//putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

		associateLookup(new ProxyLookup(
				Lookups.fixed(new Object[] {PaletteSupport.createPalette()}),
				new AbstractLookup(content)));
		
		scene = new CircuitGraphPinScene(project.getModel());
		vlEditorView = scene.createView();
		jScrollPane1.setViewportView(vlEditorView);

		enableSaveAction(true);
		content.add(opener);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void componentOpened()
	{
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed()
	{
		counter--;
		//engine = null;
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p)
	{
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p)
	{
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}
	
	ProjectModel getProject()
	{
		return project;
	}

	private void enableSaveAction(boolean canSave)
	{
		//If the canvas is modified, we add SaveCookie impl to Lookup:
		if (canSave)
		{
			content.add(saver);
		}
		//Otherwise, we remove the SaveCookie impl from the lookup
		//and add listener for any changes to the graph mode
		//to enable save capability again
		else
		{
			content.remove(saver);
			//TODO: add listener for canvas changes which will enableSaveAction(true) on change.
		}
	}

	@NbBundle.Messages(
	{
		"MSG_Saved=BUM Project succesfully saved: {0}",
		"TTL_SAVE_DIALOG=Save Project",
		"MSG_Overwrite=There is already \"{0}\", do you want to overwrite it?",
		"MSG_SaveFailed=BUM Project failed to save: {0}",
		"EXT_FileType=.bummel"
	})
	private class Saver implements SaveCookie
	{
		@Override
		public void save() throws IOException
		{
			DataObject theFile = getLookup().lookup(DataObject.class);
			if (theFile != null)
			{//save the already opened file
				File saveTo = FileUtil.toFile(theFile.getPrimaryFile());
				save(saveTo);
			} else
			{
				saveAs();
			}
		}

		public void saveAs() throws IOException
		{
			String title = NbBundle.getMessage(Saver.class, "TTL_SAVE_DIALOG");
			Object userChoice = NotifyDescriptor.NO_OPTION;
			File f;
			while (userChoice.equals(NotifyDescriptor.NO_OPTION))
			{
				f = new FileChooserBuilder(Saver.class).setTitle(title).showSaveDialog();
				if (f != null)
				{
					if (!f.getAbsolutePath().endsWith(NbBundle.getMessage(Saver.class, "EXT_FileType")))
					{
						f = new File(f.getAbsolutePath() + NbBundle.getMessage(Saver.class, "EXT_FileType"));
					}
					String projectPrevName = project.getName();
					project.setName(f.getName().substring(0, f.getName().length() - 4));
					try
					{
						if (!f.exists())
						{
							if (!f.createNewFile())
							{
								String failMsg = NbBundle.getMessage(
										Saver.class,//EditorTopComponent.class,
										"MSG_SaveFailed", f.getName());
								DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(failMsg));
								return;
							}
						} else
						{
							String overwriteMessage = NbBundle.getMessage(Saver.class, "MSG_Overwrite", f.getName());
							userChoice = DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation(overwriteMessage));
							if (NotifyDescriptor.CANCEL_OPTION.equals(userChoice))
							{
								return;
							}
							if (NotifyDescriptor.NO_OPTION.equals(userChoice))
							{
								continue;
							}
						}
						//Need getAbsoluteFile(), or X.bum and x.bum are different on *nix
						save(f.getAbsoluteFile());
						tcByFile.put(f, EditorTopComponent.this);
						userChoice = NotifyDescriptor.YES_OPTION;
					} catch (IOException ioe)
					{
						project.setName(projectPrevName);
						Exceptions.attachMessage(ioe, "Saver.saveAs():");
						Exceptions.printStackTrace(ioe);
					}
				} else
				{
					userChoice = NotifyDescriptor.YES_OPTION;
				}
			}
		}

		private void save(File f) throws IOException
		{
			XStream xstream = new XStream();
			try (FileOutputStream fos = new FileOutputStream(f))
			{
				xstream.toXML(project, fos);
			}
			String savedMessage = NbBundle.getMessage(Saver.class, "MSG_Saved", f.getName());
			StatusDisplayer.getDefault().setStatusText(savedMessage);
			FileObject fob = FileUtil.toFileObject(FileUtil.normalizeFile(f));
			assert fob != null : "MasterFS excluded from suite?";
			//Store the file, so we don't show the Save dialog again
			content.add(DataObject.find(fob));
			setDisplayName(fob.getName());
			enableSaveAction(false);
		}
	}

	@NbBundle.Messages(
	{
		"MSG_Opened=BUM Project succesfully opened: {0}",
		"TTL_OPEN_DIALOG=Open Project",
		"MSG_OpenFailed=Failed to open BUM Project: {0}"
	})
	private static class Opener implements OpenCookie
	{
		@Override
		public void open()
		{
//			String title = NbBundle.getMessage(Opener.class, "TTL_OPEN_DIALOG");
//			File f = new FileChooserBuilder(Opener.class).setTitle(title).showOpenDialog();
//			open(f);
			throw new UnsupportedOperationException("Not supported yet.");
		}

		public static ProjectModel open(File f) throws XStreamException
		{
			ProjectModel projectModel = null;
			
			if (f != null)
			{
					XStream xstream = new XStream();
					xstream.setClassLoader(Thread.currentThread().getContextClassLoader());
					try
					{
						projectModel = (ProjectModel)xstream.fromXML(f);
					}
					catch(Throwable t)
					{
						DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message("Failed to open "+f.getAbsolutePath(), NotifyDescriptor.ERROR_MESSAGE));
					}
			}
			return projectModel;
		}
	}
}